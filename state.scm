; ---- State ----
(define (state-maker location house-locations houses player)
  (lambda (value)
    (case (value)
      (('location) location)
      (('house-locations) house-locations)
      (('num-monsters) (reduce + (map num-monster-get houses))
      (('player) player))))

(define (next-state state action)
  (let ((location (next-location state action))
        (houses (next-houses state action)))
    (let ((player (next-player state houses action)))
      (state-maker location houses player))))

(define (next-location state action)
  (if (equal? (car action) 'move)
    (do-move (state 'location) (move-maker (cadr action)))
    (state 'location)))

(define (next-houses state action)
  (if (equal? (car action) 'attack)
    (let ((house (get-house-at-location state (state 'houses))))
      (if (null? house)
        (error "No house to attack!")
        (house-get-attacked house (attack (state 'player) (cadr action)))))
    (state 'houses)))

(define (next-player state houses action)
  (if (equal? (car action) 'attack)
    (let ((house (get-house-at-location state houses)))
      (player-get-attacked (state 'player) house))
    (state 'player)))

(define (get-house-at-location state houses)
  (let rec-match-house ((locations (state 'house-locations))
                        (houses houses))
    (if (null? locations)
      '()
      (if (equal? (state 'location) (car locations))
        (car houses)
        (rec-match-house (cdr locations) (cdr houses))))))
